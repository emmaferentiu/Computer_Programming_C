//Ferentiu Emma-Luciana
//problema calculeaza valoarea medie a elementelor pozitive, a celor negative si a tuturor elementelor
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


float ValMed(int x[], int dim);
float ValMedPoz(int x[], int dim);
float ValMedNeg(int x[], int dim);
int main(void)
{
	int i, dim;
	int x[20];
	printf("\nIntroduceti dimensiunea tabloului: ");
	scanf("%d", &dim);
	if (dim > 20) {
		printf("\n Dimensiune prea mare !");

		return 0;;
	}
	printf("\n Introduceti elementele tabloului:\n");
	for (i = 0; i < dim; i++)
	{
		printf("\tx[%d] = ", i);
		scanf("%d", &x[i]);
	}
	printf("\n Valoarea medie este: %.2f\n", ValMed(x, dim));
	printf("Valoarea medie pozitiva este: %.2f\n", ValMedPoz(x, dim));
	printf("Valoarea medie negativa este: %.2f\n", ValMedNeg(x, dim));
	return 0;
}
// Functia determina valoarea medie a elementelor unui tablou
float ValMed(int x[], int n)
{
	int i;
	float sum = 0;
	for (i = 0; i < n; i++)
		sum += x[i];
	return sum / n;
}
// Functia determina valoarea medie a  a elementelor pozitive  din tablou
float ValMedPoz(int x[], int n) {
	int i, j = 0;
	float sum = 0;
	for (i = 0; i < n; i++) {
		if (x[i] > 0) {
			sum += x[i];
			j++;
		}
	}
	return sum / j;
}

// Functia determina valoarea medie a elementelor negative din tablou
float ValMedNeg(int x[], int n) {
	int i, j = 0;
	float sum = 0;
	for (i = 0; i < n; i++) {
		if (x[i] < 0) {
			sum += x[i];
			j++;
		}
	}
	return sum / j;
}

//Ferentiu Emma-Luciana
//programul gaseste cel mai mic element pozitiv
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
int minim(int x[], int dim);

int main(void)
{
	int i, dim;
	int x[20];
	printf("\nIntroduceti dimensiunea tabloului: ");
	scanf("%d", &dim); //citim dimensiunea si repetam procedeul pana aceasta este corecta
	while (dim > 20) {
		printf("\n Dimensiune  este prea mare ! Repetati");
		printf("\nIntroduceti dimensiunea tabloului: ");
		scanf("%d", &dim);

	}
	printf("\n Introduceti elementele:\n");
	for (i = 0; i < dim; i++) //citim elementele tabloului
	{
		printf("\tx[%d] = ", i);
		scanf("%d", &x[i]);
	}
	int min = minim(x, dim);
	if (min < 0) //daca min a ramas cu o valoare negativa data de x[0] ins ca nu exista elemente pozitive
		printf("Nu exista elemente pozitive");

	else
		printf("Cel mai mic element pozitiv este: %d", min);

	return 0;
}
int minim(int x[], int dim)
{
	int min = x[0]; //consideram punctul de plecare al variabilei ce reprezinta minimul ca fiind primul element al tabloului
	for ( int i = 1; i < dim; i++) {
		if (x[i] < min && x[i] >= 0) {
			min = x[i];
		}
	}
	return min;
}



//Ferentiu Emma-Luciana
//programul sorteaza crescator un tablou cu 10 elemente

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
void ordonare(int V[]);
int main(void)
{
	int i;
	int V[11];
	printf("\n Introduceti elementele tabloului:\n");
	for (i = 0; i < 10; i++)
	{
		printf("\tV[%d] = ", i);
		scanf("%d", &V[i]);
	}
	ordonare(V);
	return 0;
}
// Functia care ordoneaza crescator elementele unui sir

void ordonare(int V[]) {
	int schimb, i, j;
	for (i = 0; i <= 8; i++) //interschimba valorile prin compararea elementelor cu toate celalte elemente din sir
	{
		for (j = i + 1; j <= 9; j++)
		{
			if (V[i] > V[j])
			{
				schimb = V[i];
				V[i] = V[j];
				V[j] = schimb;
			}
		}

	}

	for (int i = 0; i <= 9; i++) {
		printf("%d, ", V[i]);
	}
}

//Ferentiu Emma-Luciana
// programul verifica daca parola introdusa de la tastatura este corecta si repeta procesul
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>

int main()
{
	char p[7], s[20];
	int var = 0, nr = 0;
	strcpy(p, "parola");
	do {
		printf("Introduceti parola: ");
		scanf("%s", &s);
		if (strcmp(p, s) == 0) {
			var = 1;
			printf("Parola  este corecta!\n");
		}
		else {
			nr++;
			printf("Parola  este gresita!!!\n");
		}
	} while (var == 0);
	printf("Numarul de incercari este urmatorul:%d", nr);
	return 0;
}

5.
//programul citeste numele si prenumele unei persoane si le afiseaza cu spatiu si majuscula
//Ferentiu Emma-Luciana
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>
#define DIM 20
int main(void)
{
	char nume[DIM], prenume[DIM];
	printf("Dati numele persoanei: ");
	scanf("%s", nume);
	nume[0] = nume[0] - 32;
	printf("Dati prenumele persoanei: ");
	scanf("%s", prenume);
	prenume[0] = prenume[0] - 32;
	printf("%s	 %s",nume,prenume);
	return 0;
}

6.
//ferentiu emma-luciana
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>
void pozpare(int m1[][20], int n, int m);
int sumaimp(int m1[][20], int m2[][20], int n, int m, int k, int l);
int sumatotala(int m1[][20], int m2[][20], int n, int m, int k, int l);

int main(void)
{
	int m1[20][20], m2[20][20], n, m, k, l;
	printf("Dati dimensiunea primei matrice");
	scanf("%d%d", &n, &m);
	printf("Dati dimensiunea celei de-a doua matrice");
	scanf("%d%d", &k, &l);
	for (int i=0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			printf("m1[%d][%d]==", i, j);
			scanf("%d", &m1[i][j]);
		}
	}
	for (int i=0; i < k; i++) {
		for (int j=0; j < l; j++) {
			printf("m2[%d][%d]==", i, j);
			scanf("%d", &m2[i][j]);
		}
	}
	printf("\nPozitiile elementelor pare din prima matrice sunt: ");
	pozpare(m1, n, m);
	printf("\nPozitiile elementelor pare din a doua matrice sunt: ");
	pare(m2, k, l);
	printf("\nSuma elementelor impare din ambele matrice este:%d", sumaimp(m1, m2, n, m, k, l));
	printf("\nSuma matricelor este:%d", sumatot(m1, m2, n, m, k, l));
	return 0;
}

void pozpare(int m1[][20], int n, int m) {
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (m1[i][j] % 2 == 0) {
				printf("Pozitia %d - %d ", i, j);
			}
		}
	}
}

int sumaimp(int m1[][20], int m2[][20], int n, int m, int k, int l) {
	int s = 0;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (m1[i][j] % 2 == 1) {
				s = s + m1[i][j];
			}
		}
	}
	for (int i = 0; i < k; i++) {
		for (int j = 0; j < l; j++) {
			if (m2[i][j] % 2 == 1) {
				s = s + m2[i][j];
			}
		}
	}
	return s;
}

int sumatot(int m1[][20], int m2[][20], int n, int m, int k, int l) {
	int s = 0;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			s += m1[i][j];
		}
	}
	for (int i = 0; i < k; i++) {
		for (int j = 0; j < l; j++) {
			s += m2[i][j];
		}
	}
	return s;
}
7.

//ferentiu emma-luciana
//suma elementelor de pe o anumita coloana sa fie mai mica decat suma elementelor de pe coloana urmatoare

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>
void aranjare(float m[4][4], int n, int k);
int main()
{
	float m[4][4];
	int i, j, s1 = 0, s2 = 0, s3 = 0;
	for (i = 0; i < 3; i++) {
		for (j = 0; j < 3; j++) {
			printf("m[%d][%d]= ", i, j);
			scanf("%f", &m[i][j]);
			if (j == 0) { s1 += m[i][j]; }
			if (j == 1) { s2 += m[i][j]; }
			if (j == 2) { s3 += m[i][j]; }
		}
	}
	if (s1 > s2) {
		aranjare(m, 0, 1);
	}
	else if (s2 > s3) {
		aranjare(m, 1, 2);
	}
	else aranjare(m, 0, 2);
	return 0;
}
void aranjare(float m[4][4], int n, int k) {
	int aux = 0;
	for (int i = 0; i < 3; i++) {
		aux = m[i][n];
		m[i][n] = m[i][k];
		m[i][k] = aux;
	}

	for (int i = 0; i < 3; i++) {
		for (int j = 0; j < 3; j++) {
			printf("%.2f ", m[i][j]);
		}
		printf("\n");
	}
}
8.
//ferentiu emma-luciana
//programul calculeaza media elementelor din tablou si afiseaza elementele mai mari decat media respectiva

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>

float ValMed(int x[], int dim);
void afis(int x[], int n, int nr);
int main(void)
{
	int n, x[100];
	printf("Dati un numar <100: ");
	scanf("%d", &n);
	for (int i = 0; i < n; i++) {
		printf("x[%d]=", i);
		scanf("%d", &x[i]);
	}

printf("Numerele mai mari decat valoarea medie sunt: ");

afis(x, n, ValMed(x, n));}
float ValMed(int x[], int n)
{
	int i;
	float sum = 0;
	for (i = 0; i < n; i++)
		sum += x[i];
	return sum / n;
}

void afis(int x[], int n, int nr) {
	for (int i = 0; i < n; i++) {
		if (x[i] > nr) {
			printf("%d ", x[i]);
		}
	}
}

9.
//ferentiu emma-luciana
//programul afiseaza numarul de elemente impare negative si care sunt acestea
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>

int main(void)
{
	int n, x[100],c=0;
	printf("Dati un numar <100: ");
	scanf("%d", &n);
	for (int i = 0; i < n; i++) {
		printf("x[%d]=", i);
		scanf("%d", &x[i]);
		if (x[i] < 0) {
			if (((-1)*x[i]) % 2 == 1) { c++; }
		}
	}
	printf("Numarul elementelor impare negative este %d iar acestea sunt: ", c);
	for (int i = 0; i < n; i++) {
		if (x[i] < 0) {
			if (((-1) * x[i]) % 2 == 1) { printf("%d ", x[i]); }
		}
	}

	return 0;

}
10.
//ferentiu emma-luciana
//Scrieţi programul care citeşte elementele întregi ale unui tablou unidimensional şi construieşte într-o
//funcţie un alt tablou unidimensional în care se vor stoca resturile împărţirii elementelor primului
//tablou la numărul elementelor pozitive din acesta

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>
void stocare(int x[], int n, int c);
int main()
{
	int n, x[100], c = 0;
	printf("Dati un numar <100: ");
	scanf("%d", &n);
	for (int i = 0; i < n; i++) {
		printf("x[%d]=", i);
		scanf("%d", &x[i]);
		if (x[i] >= 0) { c++; }
	}
	stocare(x, n, c);
}

	void stocare(int x[], int n, int c){
		int x2[100];
		for (int i = 0; i < n; i++) {
			x2[i] = x[i] % c;
			printf("%d ", x2[i]); 
		}
		
	}
11.
//ferentiu emma-luciana
//programul inversează şirul şi apoi formează un
alt şir de caractere ce va conţine elementele de pe poziţiile pare ale şirului inversat

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>
void functie(char s[]);
int main(void)
{
	char s[30];
	printf("Dati un sir de caractere: ");
	scanf("%s", &s);
	printf("Sirul inversat este: ");
	functie(s);
}
void functie(char s[]) {
	char f[15];
	int j = 0;
	for (int i = strlen(s) - 1; i >= 0; i--) {
		printf("%c ", s[i]);
		if (i % 2 == 0) {
			f[j] = s[i];
			j++;
		}
	}
	printf("\nSirul ce contine elementele de pe pozitiile pare este: "); 

	for (int i = 0; i <= j-1; i++) {
		printf("%c ", f[i]);
	}
}
12.
//ferentiu emma-luciana
//Să se citească de la tastatură elementele întregi ale unei matrice de dimensiune m x n. Dacă matricea
//este pătratică să se afişeze elementele diagonalei secundare, altfel să se afişeze suma elementelor de
//pe o coloană dată, c.Valorile m, n şi c se citesc de la tastatură şi se vor scrie funcţii pentru operaţiile
//cerute

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>
void diagonala_secundara(int x[][20], int m);
int suma(int x[][20], int m, int c);
int main()
{
	int x[20][20], m, n, c;
	printf("Dati dimensiunile matricii, precum si numarul unei coloane: ");
	scanf("%d%d%d", &m, &n, &c);
	for (int i = 0; i < m; i++) {
		for (int j = 0; j < n; j++) {
			printf("x[%d][%d]= ", i, j);
			scanf("%d", &x[i][j]);
		}
	}
	if (m == n) {
		diagonala_secundara(x, m);
	}
	else {
		printf("%d", suma(x, m, c));
	}

}

void diagonala_secundara(int x[][20], int m) {
	for (int i = 0; i < m; i++) {
		printf("%d ", x[i][m - i - 1]);
	}
}
int suma(int x[][20], int m, int c) {
	int s = 0;
	for (int i = 0; i < m; i++) {
		s = s + x[i][c];
	}
	return s;
}
13.
//ferentiu emma-luciana
//parcurgere a unei matrice tridimensionale 

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>

int main()
{
	int m, n, k, c, a[20][20][20], i, j, l;
	printf("Dati dimensiunea m: ");
	scanf("%d", &m);
	printf("Dati dimensiunea n: ");
	scanf("%d", &n);
	printf("Dati dimensiunea k:");
	scanf("%d", &k);
	for (i = 0; i < m; i++) {
		for (j = 0; j < n; j++) {
			for (l = 0; l < k; l++) {
				scanf("%d", &a[i][j][k]);
			}
		}
	}
	for (i = 0; i < m; i++) {
		for (j = 0; j < n; j++) {
			for (l = 0; l < k; l++) {
				printf("a[%d][%d][%d]=%d\n", i, j, l, a[i][j][k]);
			}
		}
	}
	printf("Numerele in plan xOy sunt:\n");
	for (i = 0; i < m; i++) {
		for (j = 0; j < n; j++) {
			printf("a[%d][%d][0]=%d\n", i, j, a[i][j][0]);
		}
	}
	printf("Numerele in plan xOz sunt:\n");
	for (i = 0; i < m; i++) {
		for (j = 0; j < k; j++) {
			printf("a[%d][0][%d]=%d\n", i, j, a[i][0][j]);
		}
	}
	printf("Numerele in plan yOz sunt:\n");
	for (i = 0; i < m; i++) {
		for (j = 0; j < k; j++) {
			printf("a[0][%d][%d]=%d\n", i, j, a[0][i][l]);
		}
	}
	return 0;
}